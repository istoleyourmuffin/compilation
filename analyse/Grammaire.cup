package plic.analyse ;
import java_cup.runtime.Symbol;
import java.util.*;
import plic.arbre.*;
import plic.arbre.expression.*;
import plic.arbre.declaration.*;
import plic.arbre.instruction.*;
import plic.arbre.expression.binaire.*;
import plic.arbre.expression.constante.*;
import plic.arbre.expression.unaire.*;
import plic.tds.*;
import plic.exceptions.*;

action code {: 
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;
        lesTerminaux.put(new Integer(CodesLexicaux.CLASS), "classe") ;
        lesTerminaux.put(new Integer(CodesLexicaux.VIRGULE), ",") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGAL), "=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SI), "si") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ALORS), "alors") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SINON), "sinon") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ECR), "ecrire") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression incorrecte") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PLUS, MOINS, MULT, DIV, VIRGULE, POINTVIRGULE ;
terminal Symbol    SUP, INF, EGALEGAL, DIFF ;
terminal Symbol	   ET, OU, NON ;
terminal Symbol    EGAL ;
terminal Symbol	   CLASS, DEBUT, FIN, ECR ;
terminal Symbol    PAROUV, PARFER ;
terminal Symbol	   SI, ALORS, SINON, FSI;
terminal Symbol	   TANTQUE, REPETER, FINTANTQUE;
terminal String    CONSTANTEINT, CONSTANTEBOOL, CONSTANTECHAINE, STATUT, TYPE, IDF;

non terminal ArbreAbstrait SYSTEME;
non terminal BlocDInstructions LISTCLASS;
non terminal Classe CLASSE;
non terminal ListeDeclaration LISTDECLARATION;
non terminal Declaration DECLARATION;
non terminal DeclarationChamp DECL_CHAMP;
non terminal DeclarationConst DECL_CONST;
non terminal ListeVar LISTVAR;
non terminal DeclarationVar DECL_VAR;
non terminal ListeIdentifiant LISTIDF;
non terminal ListeInstruction LISTINST;
non terminal Instruction INSTRUCTION;
non terminal Affectation AFFECT;
non terminal Expression EXPR;
non terminal Ecrire ECRIRE;
non terminal Constante CSTE;
non terminal Condition CONDITION;
non terminal Iteration ITERATION;

precedence left INF, SUP ;
precedence left EGALEGAL, DIFF;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left OU ;
precedence left ET ;
precedence left NON ;
precedence left EGAL ;

/* ----------------------------Grammar Section-------------------- */
 
start with SYSTEME ;

SYSTEME 	::= LISTCLASS:lc
			{:  RESULT = lc ; :}
			;
	
LISTCLASS 	::= LISTCLASS:lc CLASSE:c
			{: 	lc.ajouter(c); 
				RESULT = lc ; :}
			|
				CLASSE:c
			{:  BlocDInstructions lc = new BlocDInstructions(cleft+1) ;
	            lc.ajouter(c) ;
	            RESULT = lc ; :}
			;
			
CLASSE		::= CLASS:c IDF:i LISTDECLARATION:l FIN
			{: 	TDS tds = TDS.getInstance() ;
				Classe cl =  new Classe(tds.getNumBloc(), l, ileft+1) ; 
				tds.sortieBloc() ; //On sort du bloc de la classe car elle est entierement declaree
				tds.setClasseExistante(false) ;
				tds.ajouter("publique", "classe", i, ileft+1) ;
				RESULT = cl ; :}
			|
				CLASS:c IDF:i FIN
			{:  TDS.getInstance().ajouter("publique", "classe", i, ileft+1) ;
				RESULT = new Classe(TDS.getInstance().getNumBloc(), ileft+1) ; //Classe vide, pas de TDS locale :}
			;

LISTDECLARATION ::= LISTDECLARATION:ld DECLARATION:d
				{: 	ld.ajouter(d); 
					RESULT = ld ; :}
				|
					DECLARATION:d
				{:	ListeDeclaration ld = new ListeDeclaration(dleft+1) ;
					ld.ajouter(d) ;
					RESULT = ld ; :}
				;	
				
DECLARATION ::= DECL_CHAMP:d
			{: RESULT = d ; :}
			|
				DECL_CONST:d
			{: RESULT = d ; :}
			;
				
DECL_CHAMP  ::= STATUT:s TYPE:t LISTIDF:li POINTVIRGULE
			{: 	TDS tds = TDS.getInstance() ;
				if(!tds.isClasseExistante()){
					tds.entreeBloc() ; //On entre dans l'environnement de la classe
				}
				boolean valide = true;			
				for(Identifiant i : li) {
					valide = tds.ajouter(s, t, i.getNom(), sleft+1) && valide ;
				}
				DeclarationChamp dc = new DeclarationChamp(sleft+1, valide) ;
				RESULT = dc ; :}
			|
				TYPE:t LISTIDF:li POINTVIRGULE
			{:	boolean valide = true;	
				for(Identifiant i : li) {
					valide = TDS.getInstance().ajouter(t, i.getNom(), tleft+1) && valide ;
				}
				DeclarationChamp dc = new DeclarationChamp(tleft+1, valide) ;
				RESULT = dc ; :}
			;
			
LISTIDF 	::= LISTIDF:li VIRGULE IDF:i
			{: 	li.ajouter(new Identifiant(i, ileft+1));
				RESULT = li ; :}
			|
				IDF:i
			{: 	ListeIdentifiant li = new ListeIdentifiant();
				li.ajouter(new Identifiant(i, ileft+1));
				RESULT = li ; :}
			;

DECL_CONST	::= STATUT:s IDF:i PAROUV PARFER DEBUT LISTVAR:lv LISTINST:li FIN
			{:  TDS tds = TDS.getInstance() ;
				tds.entreeBloc(tds.getDernierBloc()); //la declaration de variables a deja cree un nouveau bloc
				DeclarationConst cons = new DeclarationConst(tds.getNumBloc(), li, sleft+1) ;
				tds.sortieBloc() ;
				tds.setChangementBloc(true) ;
				tds.ajouter(s, "const", i, sleft+1) ;
				RESULT = cons ; :}
			|	
				STATUT:s IDF:i PAROUV PARFER DEBUT LISTINST:li FIN
			{:  TDS tds = TDS.getInstance() ;
				if(!tds.isClasseExistante()){
					tds.entreeBloc(); //On entre dans l'environnement de la classe
				}
				tds.entreeBloc(); //pas encore de bloc cree 
				DeclarationConst cons = new DeclarationConst(tds.getNumBloc(), li, sleft+1) ;
				tds.sortieBloc() ;
				tds.setChangementBloc(true) ;
				tds.ajouter(s, "const", i, sleft+1) ;
				RESULT = cons ; :}
			;
			
LISTVAR 	::= LISTVAR:lv DECL_VAR:d
			{:	lv.ajouter(d) ;
				RESULT = lv ; :}
			|	
				DECL_VAR:d
			{:	ListeVar lv = new ListeVar(dleft+1) ;
				lv.ajouter(d) ;
				RESULT = lv ; :}
			;

DECL_VAR 	::= TYPE:t LISTIDF:li POINTVIRGULE
			{:	TDS tds = TDS.getInstance() ;
				if(!tds.isClasseExistante()){
					tds.entreeBloc(); //On entre dans l'environnement de la classe
					tds.entreeBloc(); //On entre dans l'environnement du constructeur
				} else if (tds.getChangementBloc()) { //Si on est pas encore dans le bloc constructeur
					tds.entreeBloc() ;
				} else {
					tds.entreeBloc(tds.getDernierBloc()) ;
				}
				boolean valide = true ;
				for(Identifiant i : li) {
					valide = tds.ajouter(t, i.getNom(), tleft+1) && valide ;
				}
				DeclarationVar dv = new DeclarationVar(tleft+1, valide) ;
				tds.sortieBloc() ;
				RESULT = dv ; :}
			;

LISTINST 	::= LISTINST:li INSTRUCTION:i
			{:	li.ajouter(i); 
				RESULT = li; :}
			|
				INSTRUCTION:i
			{:  ListeInstruction li = new ListeInstruction(ileft+1);
				li.ajouter(i);
				RESULT = li; :}
			;	
			
INSTRUCTION	::= AFFECT:a
			{: RESULT = a ; :}
			|
				ECRIRE:e
			{: RESULT = e ; :}
			|
				CONDITION:c
			{: RESULT = c ; :}
			|
				ITERATION:i
			{: RESULT = i ; :}
			;
			
AFFECT		::= IDF:i EGAL EXPR:e POINTVIRGULE
			{: 	Affectation af = new Affectation(i, e, eleft+1);
				RESULT = af ; :}
			;

CONDITION	::= SI EXPR:e ALORS LISTINST:l FSI
			{:  Condition cond = new Condition(e, l, eleft+1);
				RESULT = cond; :}
			|
				SI EXPR:e ALORS LISTINST:l1 SINON LISTINST:l2 FSI
			{:  Condition cond = new Condition(e, l1, l2, eleft+1);
				RESULT = cond; :}
			;
	
ITERATION	::= TANTQUE EXPR:e REPETER LISTINST:l FINTANTQUE
			{:	Iteration ite = new TantQue(e, l, eleft+1);
				RESULT = ite; :}
			;
		
ECRIRE 		::= ECR EXPR:e POINTVIRGULE
			{: 	EcrireExpression ee= new EcrireExpression(e, eleft+1);
				RESULT = ee ; :}	
			|
				ECR CONSTANTECHAINE:c POINTVIRGULE
			{: 	EcrireChaine ec= new EcrireChaine(c.replace("\"\"","\\\""), cleft+1);
				RESULT = ec ; :}	
			;		
                
    
EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
                CSTE:c
                {: RESULT = c ; :}
        |
                IDF:i
                {: RESULT = new Identifiant(i, ileft+1) ; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
		;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e, eleft+1) ; :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e, eleft+1) ; :}
		;